// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderDelay_ReportOrderDelay_FullMethodName         = "/order.OrderDelay/ReportOrderDelay"
	OrderDelay_AssignDelayReportToAgent_FullMethodName = "/order.OrderDelay/AssignDelayReportToAgent"
	OrderDelay_GetVendorsDelays_FullMethodName         = "/order.OrderDelay/GetVendorsDelays"
)

// OrderDelayClient is the client API for OrderDelay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderDelayClient interface {
	ReportOrderDelay(ctx context.Context, in *ReportOrderDelayRequest, opts ...grpc.CallOption) (*ReportOrderDelayResponse, error)
	AssignDelayReportToAgent(ctx context.Context, in *AssignDelayReportToAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVendorsDelays(ctx context.Context, in *GetVendorsDelaysRequest, opts ...grpc.CallOption) (*GetVendorsDelaysResponse, error)
}

type orderDelayClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderDelayClient(cc grpc.ClientConnInterface) OrderDelayClient {
	return &orderDelayClient{cc}
}

func (c *orderDelayClient) ReportOrderDelay(ctx context.Context, in *ReportOrderDelayRequest, opts ...grpc.CallOption) (*ReportOrderDelayResponse, error) {
	out := new(ReportOrderDelayResponse)
	err := c.cc.Invoke(ctx, OrderDelay_ReportOrderDelay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDelayClient) AssignDelayReportToAgent(ctx context.Context, in *AssignDelayReportToAgentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OrderDelay_AssignDelayReportToAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDelayClient) GetVendorsDelays(ctx context.Context, in *GetVendorsDelaysRequest, opts ...grpc.CallOption) (*GetVendorsDelaysResponse, error) {
	out := new(GetVendorsDelaysResponse)
	err := c.cc.Invoke(ctx, OrderDelay_GetVendorsDelays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderDelayServer is the server API for OrderDelay service.
// All implementations must embed UnimplementedOrderDelayServer
// for forward compatibility
type OrderDelayServer interface {
	ReportOrderDelay(context.Context, *ReportOrderDelayRequest) (*ReportOrderDelayResponse, error)
	AssignDelayReportToAgent(context.Context, *AssignDelayReportToAgentRequest) (*emptypb.Empty, error)
	GetVendorsDelays(context.Context, *GetVendorsDelaysRequest) (*GetVendorsDelaysResponse, error)
	mustEmbedUnimplementedOrderDelayServer()
}

// UnimplementedOrderDelayServer must be embedded to have forward compatible implementations.
type UnimplementedOrderDelayServer struct {
}

func (UnimplementedOrderDelayServer) ReportOrderDelay(context.Context, *ReportOrderDelayRequest) (*ReportOrderDelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOrderDelay not implemented")
}
func (UnimplementedOrderDelayServer) AssignDelayReportToAgent(context.Context, *AssignDelayReportToAgentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDelayReportToAgent not implemented")
}
func (UnimplementedOrderDelayServer) GetVendorsDelays(context.Context, *GetVendorsDelaysRequest) (*GetVendorsDelaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorsDelays not implemented")
}
func (UnimplementedOrderDelayServer) mustEmbedUnimplementedOrderDelayServer() {}

// UnsafeOrderDelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderDelayServer will
// result in compilation errors.
type UnsafeOrderDelayServer interface {
	mustEmbedUnimplementedOrderDelayServer()
}

func RegisterOrderDelayServer(s grpc.ServiceRegistrar, srv OrderDelayServer) {
	s.RegisterService(&OrderDelay_ServiceDesc, srv)
}

func _OrderDelay_ReportOrderDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOrderDelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDelayServer).ReportOrderDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDelay_ReportOrderDelay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDelayServer).ReportOrderDelay(ctx, req.(*ReportOrderDelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDelay_AssignDelayReportToAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDelayReportToAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDelayServer).AssignDelayReportToAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDelay_AssignDelayReportToAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDelayServer).AssignDelayReportToAgent(ctx, req.(*AssignDelayReportToAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDelay_GetVendorsDelays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorsDelaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDelayServer).GetVendorsDelays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderDelay_GetVendorsDelays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDelayServer).GetVendorsDelays(ctx, req.(*GetVendorsDelaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderDelay_ServiceDesc is the grpc.ServiceDesc for OrderDelay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderDelay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderDelay",
	HandlerType: (*OrderDelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportOrderDelay",
			Handler:    _OrderDelay_ReportOrderDelay_Handler,
		},
		{
			MethodName: "AssignDelayReportToAgent",
			Handler:    _OrderDelay_AssignDelayReportToAgent_Handler,
		},
		{
			MethodName: "GetVendorsDelays",
			Handler:    _OrderDelay_GetVendorsDelays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
