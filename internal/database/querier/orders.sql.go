// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orders.sql

package querier

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDelayCheck = `-- name: CreateDelayCheck :exec
INSERT INTO delay_checks (agent_id, report_id) VALUES ($1, $2)
`

type CreateDelayCheckParams struct {
	AgentID  int32
	ReportID int64
}

// Create a new delay check
func (q *Queries) CreateDelayCheck(ctx context.Context, arg CreateDelayCheckParams) error {
	_, err := q.db.Exec(ctx, createDelayCheck, arg.AgentID, arg.ReportID)
	return err
}

const createDelayReport = `-- name: CreateDelayReport :exec
INSERT INTO delay_reports (order_id) VALUES ($1)
`

// Report a new delay for an order
func (q *Queries) CreateDelayReport(ctx context.Context, orderID int64) error {
	_, err := q.db.Exec(ctx, createDelayReport, orderID)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, vendor_id, delivery_time, created_at
FROM orders
WHERE id = $1
`

// Get an order by ID
func (q *Queries) GetOrderByID(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.DeliveryTime,
		&i.CreatedAt,
	)
	return i, err
}

const getTripByOrderID = `-- name: GetTripByOrderID :one
SELECT id, status, order_id, created_at
FROM trips
WHERE order_id = $1
`

// Get a trip record for a specific order_id
func (q *Queries) GetTripByOrderID(ctx context.Context, orderID int64) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripByOrderID, orderID)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const listDelayReportsForVendor = `-- name: ListDelayReportsForVendor :many
SELECT delay_reports.id, delay_reports.created_at, delay_reports.order_id
FROM delay_reports
JOIN orders ON delay_reports.order_id = orders.id
WHERE orders.vendor_id = $1 AND delay_reports.created_at > $2
`

type ListDelayReportsForVendorParams struct {
	VendorID  int32
	CreatedAt pgtype.Timestamptz
}

// Get all delay reports for a given vendor ID
func (q *Queries) ListDelayReportsForVendor(ctx context.Context, arg ListDelayReportsForVendorParams) ([]DelayReport, error) {
	rows, err := q.db.Query(ctx, listDelayReportsForVendor, arg.VendorID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DelayReport
	for rows.Next() {
		var i DelayReport
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.OrderID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDeliveryTime = `-- name: UpdateOrderDeliveryTime :exec
UPDATE orders
SET delivery_time = $2
WHERE id = $1
`

type UpdateOrderDeliveryTimeParams struct {
	ID           int64
	DeliveryTime pgtype.Interval
}

// Updates the delivery time for a specific order by its ID
func (q *Queries) UpdateOrderDeliveryTime(ctx context.Context, arg UpdateOrderDeliveryTimeParams) error {
	_, err := q.db.Exec(ctx, updateOrderDeliveryTime, arg.ID, arg.DeliveryTime)
	return err
}
